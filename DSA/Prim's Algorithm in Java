import java.util.Arrays;

public class PrimsAlgorithm {
    
    // Function to find the vertex with the minimum key value from the set of vertices not yet included in MST
    private int getMinimumKeyVertex(int[] key, boolean[] mstSet, int vertices) {
        int min = Integer.MAX_VALUE, minIndex = -1;

        for (int v = 0; v < vertices; v++) {
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                minIndex = v;
            }
        }
        return minIndex;
    }

    // Function to print the constructed MST stored in parent[]
    private void printMST(int[] parent, int[][] graph, int vertices) {
        System.out.println("Edge \tWeight");
        for (int i = 1; i < vertices; i++) {
            System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
        }
    }

    // Function to construct and print MST for a graph represented using adjacency matrix representation
    public void primMST(int[][] graph) {
        int vertices = graph.length;
        int[] parent = new int[vertices]; // Array to store constructed MST
        int[] key = new int[vertices];    // Key values used to pick minimum weight edge in cut
        boolean[] mstSet = new boolean[vertices]; // To represent set of vertices not yet included in MST

        // Initialize all keys as INFINITE
        Arrays.fill(key, Integer.MAX_VALUE);
        key[0] = 0; // Start with the first vertex
        parent[0] = -1; // First node is always the root of MST

        // The MST will have vertices - 1 edges
        for (int count = 0; count < vertices - 1; count++) {
            // Pick the minimum key vertex not yet included in MST
            int u = getMinimumKeyVertex(key, mstSet, vertices);

            // Add the picked vertex to the MST Set
            mstSet[u] = true;

            // Update the key and parent index of the adjacent vertices of the picked vertex
            for (int v = 0; v < vertices; v++) {
                // graph[u][v] is non-zero only for adjacent vertices of u
                // mstSet[v] is false for vertices not yet included in MST
                // Update the key only if graph[u][v] is smaller than key[v]
                if (graph[u][v] != 0 && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
            }
        }

        // Print the constructed MST
        printMST(parent, graph, vertices);
    }

    public static void main(String[] args) {
        // Example graph represented as an adjacency matrix
        int[][] graph = {
            {0, 2, 0, 6, 0},
            {2, 0, 3, 8, 5},
            {0, 3, 0, 0, 7},
            {6, 8, 0, 0, 9},
            {0, 5, 7, 9, 0}
        };

        PrimsAlgorithm prim = new PrimsAlgorithm();
        prim.primMST(graph);
    }
}
